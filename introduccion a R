####  induccion a R  #####

#Se genera una secuencia de un vector de parametros -pi hasta pi, con una longitud de
#la longitud es el #n datos del vector.

x = seq(-pi, pi, len=70)
x

#para graficar  / forma de plotear en puntos con el comando (lty=)
#xlim = c() | limite del eje x / ylim = X() |  limite del eje y

plot(x,sin(x),
     type = "l", ylim = c(-1.2,2),
     xlim = c(-5,5), color= "red", lty=3 )

#Para sobreponer graficas entre si. / graficas de bajo nivel se sobre ponen en algo existente
#pch = es el tipo de punto que va ploetar

"graficas de bajo nivel"

points(x,cos(x), pch= 1 , col = 5 ) 

lines(x,tan(x), type="p", lty=1, pch=4, col=6)

#para poner un titulo en la grafica 
title("Funciones trigonometricas aleatorias", cex.main = 2.1, col=2 )
#para poner una guia o un indice dentro de la misma grafica, que indice cada funcion.
legend(-5,2, c("Sin", "Cos", "Tan"), col=c(2,4,6), lty=c(2,1,NA), pch=c(NA, 4,6))

################################################################################
"Programacion en R"
#comandos de expresion basicos #si se le pone el parentesis arroja inmediatamente 
#el resultado de la operacion.
x<-3
x=3
b= 3*3*3
(x2=x*2)
(y = x^2-15)
(z=4*x+y^4)
#para hacer 4 comandos en una sola linea / mostrando el resultado
{patata = 15; b= 9e3*a+9; a; cos(b)}
#tambien se puede expresar asi;
{a = 1
  b=3*63+9
  a
  cos(b)} #se puede guardar la expresion asi
#solo da el ultimo resultado de la operacion
{a = 1; b=3*63+9; a;cos(b)} 
#hace el comando en cada valor independiente /mostrandolo en el enviroment individualmente
a=8; b=3*5+9; s=tan(a)

#Se pueden mezclar  / saltos de linea 
{a = 8; b= 3*5 
  a; tan(a)}

#si el ultimo comando es de asignacion
{a = 8; b=5*23+2
  a; cos(b)
  d= cos(b)}                      #no da resultados

################################################################################
"Operadores Logicos"

x=7

x<6       #preguntar si x es menor a 6
x<=7      #preguntar si x es menor o igual a 7
x>3       #preguntar si x es mayor a 3
x>=8      #preguntar si x es mayor o igual a 8
x == 3    #preguntar si x es igual a 3
x != 10

"Operaciones de vectores"

a = 1:10

a>5         #Preguntar para cada entrada

a_cond = (a<6)
a_cond            #muestra los valores que son inferiores a 6 dentro del vector a

sum(a_cond)  #suma TRUE=1 y FALSE = 0   / 
#Nos da el numero de valores menores a 6 en el vector a


a[a_cond]  #devuelve los valores de a que cumplen la condicion de ser menores a 6


##  combinacion de operadores logicos  ##

a = 1:10

#Pregunta si a es menor a 5 y mayor a 2
#devuelve los valores que cumplen esas condiciones.

condicional1 = a < 5 & a > 2  
condicional1 #devuelve los valores que lo cumplen en string por posicion
a[condicional1] #devuelve los valores en int o numerico que cumplen la condicion

"&" #operador logico binario / se resuelve de forma binaria con 2 objetos solamente

################################################################################

"|" #para el condicional de datos que cumplan una condicion u otra 

condicional2 = a < 3 | a > 8 
condicional2
a[condicional2] 
################################################################################
"Funcion  (if)"
################################################################################

"funcion rm" #(borra cosas)
"funcion list=" #(especifica que cosas se desea borrar)
"funcion ls()" #(para borrar una sublista dentro de una lista)
"rm(list=ls())"   #Borrar todo el ambiente

x<-c(5)
if(x<9){y=9}   #devuelve la asignacion que es verdadera solamente
               #si x es menor a y , guarda y igual a 9

if(x>6){y=-1} #si x es mayor a 6, guarda y igual a -1 

{a=9
b=7
b^2
}

################################################################################
"Para pedir ayuda en R"
#se escribe la funcion;      help("aqui va lo que quieres preguntar")
help("if")

#if condicion  o expresion

x=c(2,5,6)
x<7

if(x<7){y=1}  "{y=1}"   #la condicion solo debe tener un unico resultado

#Se pueden poner varias variables:

#para correr el codigo se pone el cursor en medio de = = y se da en correr codigo
if(a==9){
  y=7
  z=y^2                 #no da resultado
  y=9
}

if(a==9){
  y=7
  z=y^2                #si da resultado al agregarse una y
  y=9
  y
}

################################################################################

"condicion de la funcion if, puede ser directa TRUE o FALSE"

d = (b==7)
if(d){y=-3}

"else; que hacer en caso de false"  #ayuda a cubrir diferentes situaciones sobre la variable

if(a<7){          #si x es menor a 7
  x = 6           #entonces haz x igual a 6
} else {          # si no pasa que es menor a 7
  x = 7           # entonces haz x igual a 7
}

if(a<7){x=5}else{x=8}   #deben estar en el mismo renglon para que funcione esta expresion

#o tambien es valido de esta forma

if(a<7) x=6 else x=1  #tambien se pueden quitar los corchetes

#Pero hay una funcion que hace algo asi:
variable_condicional = ifelse(a<7,6,1)
variable_condicional2 = ifelse(a<7,6,7)

################################################################################
"Tambien hay asignaciones"
ifelse(a<8,y=3,y=6) #MAL ESCRITO / NO FUNCIONA

################################################################################
"Ciclos"
################################################################################

"for"   #permite hacer una tarea variando un indice

#esta funcion nos permite hacer una tarea variando de un indice

2^2
4^2
6^2
8^2
10^2

#para escribir los primeros 10 o 20 numeros cuadrados en numeros pares:
ind= 1:10
ind^2
cuadrados_primeros10_numeros_pares=(2*ind)^2

#otra forma de poder hacerlo

for(i in 1:10){
  print((2*i)^2)
}

#como funciona el for /  for (indice in vector_indice){ tarea_ciclo = expresion}

for (i in 2:52){
  print((1+i)^3)
}

#se busca crear la siguiente funcion con un ciclo
#x = (x1,x2,x3,x4) --> y = (x1,x1+x2,x2+x3,x3+x4)
"primero se crea la variable con el termino del vector"

x = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)
n=length(x)
x3= 1:1000 #se genera una lista en la funcion x3
n= length(x3) #numero de valores de la funcion x3
n

#primer entrada de y=a x1
y = c(x[1]) #se crea una entrada de un vector llamado y con el vector de x
for (i in 2:n ){
  y[i] = x[i-1]+ x[i] #con esto define las siguientes entradas de y
}

#Si el vector x es grande: / se puede usar para hacer una tabla de amortizacion

y = c(x3[1])
for (i in 2:n){
  y[i] = x3[i-1] + x3[i]
}
y

#crea la variable del indice: i
#no necesariamente nos da el resultado (solo cuando se llama la funcion)
################################################################################
"Ciclos"
################################################################################
#Usando un ciclo para poder resolver:
"Sucesion de Fibonacci"

#1,1,2,3,5,8,13
#y[n] = y[n-1] + y[n-2]

n= 20  #numero de elementos de la sucesion
y= c(1,1)  #se ponen los dos primeros elementos, sobre estos se suma
for(j in 3:n ) {  #aqui se pone el ciclo de donde iria
  y[j]= y[j-1] + y[j-2]
}

y

"Se puede hacer la n para queramos":

n= 50  #numero de elementos de la sucesion
z= c(1,1)  #se ponen los dos primeros elementos, sobre estos se suma
for(j in 3:n ) {  #aqui se pone el ciclo de donde iria
  z[j]= z[j-1] + z[j-2]
}

z
  
#Otro ejemplo de algo que si necesite el ciclo:
#suma de armonica:  1 + (1/2) + (1/3) + (1/4) + ... + (1/n) =

n = 10000
suma = 0
for (h in 1:n){
  suma = suma +(1/h)
}

suma

################################################################################
#Funcion while
#Esta funcion realiza la tarea mientras se cumpla una condicion.
#realiza la tarea cuantas veces sea necesario mientras se cumpla esta condicion
#while(condicion){expresion}

#Vamos a mostrar numeros hasta pasa una cota

x = 0
cota = 9
                              #El ciclo podria no terminar con este comando:
while(x < 9){                    #imprimiendo casas eternamente, nunca va tener una detencion
  print(x)
  x = x+1
}

################################################################################
#un ciclo eterno de iteraciones infinitas que no tienen un freno.
x = 0
cota = 9

while (x<9){            #un ciclo eterno , que no se concreta tienen problemas
  print(x)               #genera un problema que en el ambiente aparece un cero, 
  x = x-1               # pero si le preguntas te da el ultimo valor de la iteracion.
}  

x

#para salir del ciclo se pone una condicion. / en este caso la condicion if

x=0
cota = 9
nite = 0  # numero de iteraciones realizadas
while(x < 9){
  print(x) 
  x = x-1
  nite = nite + 1 
  if(nite == 201) {break}  #condicional de que 100 ciclos se detiene y la funcion break es para deternelos
}

################################################################################
"Funciones"

#se crean las funciones propias
#Nombre_funcion = function(parametros){expresion}

#Ejemplo 1:
area_rectangulo = function(base,altura){base * altura}

#nombre de la funcion = comando function (inputs){calculo de la funcion}

area_rectangulo(2,9) #puede tener errores porque calcula pero no tiene restricciones

#Validacion de los datos / if condiciona bajo que parametros sale el mensaje cat
#cat sirve para poner un string sobre una informacion si arroja cierto valor
#  return sirve para regresar los datos de la funcion si se cumple otra condicon

area_rectangulo2 = function(base,altura){
  if(base < 0 | altura < 0 ) {    #condiciona que no sea menor a 0 y los vectores por longitud
    cat("Error : no seas wey, no hay dimensiones negativas ")
  }
  else { 
    return (base *  altura)
    }  
}

area_rectangulo2(-1,2)  #arroja error con mensaje
area_rectangulo2(1,3)  #arroja resultado
area_rectangulo2("a",1)  #arroja error por default de R
area_rectangulo2(c(2,3),8) #arroja error por la condicion dada en el if

#Las funciones "is algo":

#vector de 1 entrada
is.numeric(h)  #valida con valores boleanos si es un numero la variable

is.vector(h) #valida con valores boleanos si es un vector la variable

################################################################################

area_rectangulo3 = function(base, altura){
  if (length(base)>=2  |  length(altura)>=2){
    cat("Error vector detectado")}
  else{
    if(base<0|altura<0){cat ("Error dimensiones negativas")
  }
  else { return(base*altura)}}
}

area_rectangulo3(2,-5)
area_rectangulo3(-4,5)
area_rectangulo3(c(6,2),3)
area_rectangulo3(0,5)

#nota 
#variables dentro de una funcion solo son locales, solo existen mientras la funcion se lleva acabo
#despues desaparecen al terminar la funcion
#si se definen variables dentro de la funcion solo seran locales, de esa funcion 
#codigo return puede regresar cualquier cosa, vectores, matrices, listas, operaciones, funciones

